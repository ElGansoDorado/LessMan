/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/events": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get all event posters */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description List of event posters */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Event"][];
          };
        };
        401: components["responses"]["UnauthorizedError"];
      };
    };
    put?: never;
    /** Create a new event poster */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["EventCreate"];
        };
      };
      responses: {
        /** @description Event created successfully */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Event"];
          };
        };
        401: components["responses"]["UnauthorizedError"];
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/events/{eventId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get single event poster by ID */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /**
           * @description ID of the event to retrieve
           * @example evt_abc123
           */
          eventId: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Event poster details */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Event"];
          };
        };
        401: components["responses"]["UnauthorizedError"];
        404: components["responses"]["NotFoundError"];
      };
    };
    put?: never;
    post?: never;
    /** Delete an event poster */
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          eventId: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Event deleted successfully */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        401: components["responses"]["UnauthorizedError"];
        404: components["responses"]["NotFoundError"];
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    EventBase: {
      /** @example Jazz Festival */
      title?: string;
      /** @example Annual international jazz event */
      description?: string;
      /**
       * Format: date-time
       * @example 2023-07-15T19:00:00Z
       */
      date?: string;
      /** @example Central Park, New York */
      location?: string;
      /**
       * Format: uri
       * @example https://example.com/posters/jazz-festival.jpg
       */
      imageUrl?: string;
      /** @example 25.99 */
      price?: number;
      /**
       * @example festival
       * @enum {string}
       */
      category?:
        | "concert"
        | "exhibition"
        | "festival"
        | "theater"
        | "sport"
        | "other";
    };
    Event: components["schemas"]["EventBase"] & {
      /** @example evt_abc123 */
      id: string;
      /** @example user_xyz456 */
      organizerId: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    Error: {
      message: string;
      code: string;
    };
    EventCreate: components["schemas"]["EventBase"] & Record<string, never>;
  };
  responses: {
    /** @description Unauthorized */
    UnauthorizedError: {
      headers: {
        [name: string]: unknown;
      };
      content: {
        "application/json": components["schemas"]["Error"];
      };
    };
    /** @description Resource not found */
    NotFoundError: {
      headers: {
        [name: string]: unknown;
      };
      content: {
        "application/json": components["schemas"]["Error"];
      };
    };
  };
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
